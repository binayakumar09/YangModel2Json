#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Sep 26 06:10:01 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\]777;notify;Command completed;exit\\\]0;binpradh@vm009139:~/Dev_Linux\\\]7;file://vm009139.nsn-intra.net/home/binpradh/Dev_Linux\\\[binpradh@vm009139 Dev_Linux\]\$ "
send -- "cd libyang/build\r"
expect -exact "cd libyang/build\r
\]777;notify;Command completed;cd libyang/build\\\]0;binpradh@vm009139:~/Dev_Linux/libyang/build\\\]7;file://vm009139.nsn-intra.net/home/binpradh/Dev_Linux/libyang/build\\\[binpradh@vm009139 build\]\$ "
send -- "./yanglint\r"
expect -exact "./yanglint\r
> "
send -- "add ../models/ietf-interfaces@2018-02-20.yang"
expect -exact "ietf-interfaces@2018-02-20.yang"
send -- "\r"
expect -exact "\r
> "
send -- "add ../models/iana-if-type@2017-01-19.yang"
expect -exact "iana-if-type@2017-01-19.yang"
send -- "\r"
expect -exact "\r
> "
send -- "data -f json -t config -o ietf-interfaces.json"
expect -exact "data -f json -t config -o ietf-interfaces.json"
send -- " ietf-interface.xml"
expect -exact "ietf-interface.xml"
send -- "\r"
expect -exact "\r
> "
send -- "exit\r"
expect -exact "exit\r
\]777;notify;Command completed;./yanglint\\\]0;binpradh@vm009139:~/Dev_Linux/libyang/build\\\]7;file://vm009139.nsn-intra.net/home/binpradh/Dev_Linux/libyang/build\\\[binpradh@vm009139 build\]\$ "
send -- "exit\r"
expect eof
